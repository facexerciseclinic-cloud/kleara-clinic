// React Core
import React, { useState, useEffect } from 'react';

// Material-UI Components
import {
  Box,
  Typography,
  Card,
  CardContent,
  Tabs,
  Tab,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Stack,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  LinearProgress,
  Chip,
  IconButton,
  Paper,
  CircularProgress,
  Alert,
} from '@mui/material';

// Services & Contexts
import { api } from '../services/api';
import { useNotifications } from '../contexts/NotificationContext';
import { LoadingState, EmptyState } from '../components/common/States';

// Components
import GridItem from '../components/common/GridItem';

// Material-UI Icons
import {
  TrendingUp,
  People,
  CalendarToday,
  Inventory,
  AttachMoney,
  BarChart,
  PieChart,
  Download,
  Print,
  Refresh,
  DateRange,
  Assessment,
  MonetizationOn,
  PersonAdd,
  Event,
  LocalHospital,
  Star,
} from '@mui/icons-material';

// TypeScript Interfaces
interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

interface SalesData {
  month: string;
  revenue: number;
  treatments: number;
  packages: number;
}

interface TopTreatment {
  name: string;
  count: number;
  revenue: number;
  growth: number;
}

interface CustomerSegment {
  segment: string;
  count: number;
  percentage: number;
  revenue: number;
}

interface InventoryAlert {
  item: string;
  stock: number;
  reorder: number;
  status: 'critical' | 'low' | 'ok';
}

// Tab Panel Component
function TabPanel(props: TabPanelProps): React.ReactElement | null {
  const { children, value, index, ...other } = props;
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

const Reports: React.FC = () => {
  const { showNotification } = useNotifications();
  
  // UI State
  const [tabValue, setTabValue] = useState(0);
  const [dateRange, setDateRange] = useState('thisMonth');
  const [reportType, setReportType] = useState('summary');
  const [loading, setLoading] = useState(true);
  
  // Data State
  const [salesData, setSalesData] = useState<SalesData[]>([]);
  const [topTreatments, setTopTreatments] = useState<TopTreatment[]>([]);
  const [customerSegments, setCustomerSegments] = useState<CustomerSegment[]>([]);
  const [inventoryAlerts, setInventoryAlerts] = useState<InventoryAlert[]>([]);
  
  // Summary Stats
  const [totalRevenue, setTotalRevenue] = useState(0);
  const [totalTreatments, setTotalTreatments] = useState(0);
  const [avgRevenue, setAvgRevenue] = useState(0);
  const [growthRate, setGrowthRate] = useState(0);

  // Fetch data on mount and when dateRange changes
  useEffect(() => {
    fetchReportsData();
  }, [dateRange]);

  const fetchReportsData = async () => {
    try {
      setLoading(true);
      
      // Fetch dashboard data
      const dashboardResponse = await api.get('/reports/dashboard');
      const dashboardData = dashboardResponse.data?.data || dashboardResponse.data;
      
      console.log('Dashboard data:', dashboardData); // Debug log
      
      // Transform sales data from monthly revenue
      if (dashboardData?.monthlyRevenue && Array.isArray(dashboardData.monthlyRevenue)) {
        const transformed = dashboardData.monthlyRevenue.map((item: any) => ({
          month: new Date(item.month).toLocaleDateString('th-TH', { month: 'short' }),
          revenue: item.revenue || 0,
          treatments: item.treatments || 0,
          packages: item.packages || 0,
        }));
        setSalesData(transformed);
        
        // Calculate stats
        const total = transformed.reduce((sum: number, item: any) => sum + item.revenue, 0);
        const totalTx = transformed.reduce((sum: number, item: any) => sum + item.treatments, 0);
        setTotalRevenue(total);
        setTotalTreatments(totalTx);
        setAvgRevenue(transformed.length > 0 ? total / transformed.length : 0);
        
        if (transformed.length >= 2) {
          const growth = ((transformed[transformed.length - 1].revenue - transformed[0].revenue) / transformed[0].revenue) * 100;
          setGrowthRate(growth);
        }
      } else {
        // Set default stats from quickStats if available
        if (dashboardData?.quickStats) {
          setTotalRevenue(dashboardData.quickStats.totalRevenue || 0);
          setTotalTreatments(dashboardData.quickStats.totalTreatments || 0);
        }
        setSalesData([]);
      }
      
      // Fetch analytics data
      try {
        const analyticsResponse = await api.get('/analytics/revenue');
        const analyticsData = analyticsResponse.data?.data || analyticsResponse.data;
        
        if (analyticsData?.topServices && Array.isArray(analyticsData.topServices)) {
          const transformedTreatments = analyticsData.topServices.slice(0, 5).map((item: any) => ({
            name: item.name || item.service,
            count: item.count || 0,
            revenue: item.revenue || 0,
            growth: item.growthRate || 0,
          }));
          setTopTreatments(transformedTreatments);
        }
      } catch (err) {
        console.warn('Analytics revenue endpoint not available:', err);
        setTopTreatments([]);
      }
      
      // Fetch customer segments
      try {
        const customerResponse = await api.get('/analytics/customer-retention');
        const customerData = customerResponse.data?.data || customerResponse.data;
        
        if (customerData?.segments && Array.isArray(customerData.segments)) {
          setCustomerSegments(customerData.segments);
        }
      } catch (err) {
        console.warn('Customer retention endpoint not available:', err);
        setCustomerSegments([]);
      }
      
      // Fetch inventory alerts
      try {
        const inventoryResponse = await api.get('/inventory/alerts');
        const inventoryData = inventoryResponse.data?.data || inventoryResponse.data;
        
        if (Array.isArray(inventoryData)) {
          const transformedAlerts = inventoryData.map((item: any) => {
            const onHand = item.quantity?.onHand || 0;
            const reorderPoint = item.quantity?.reorderPoint || 0;
            let status: 'low' | 'critical' | 'ok' = 'ok';
            
            if (onHand <= reorderPoint * 0.5) {
              status = 'critical';
            } else if (onHand <= reorderPoint) {
              status = 'low';
            }
            
            return {
              item: item.name,
              stock: onHand,
              reorder: reorderPoint,
              status: status,
            };
          });
          setInventoryAlerts(transformedAlerts);
        }
      } catch (err) {
        console.warn('Inventory alerts endpoint not available:', err);
        setInventoryAlerts([]);
      }
      
    } catch (error: any) {
      console.error('Failed to fetch reports data:', error);
      showNotification('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', 'error');
      
      // Set empty data on error
      setSalesData([]);
      setTopTreatments([]);
      setCustomerSegments([]);
      setInventoryAlerts([]);
      setTotalRevenue(0);
      setTotalTreatments(0);
      setAvgRevenue(0);
      setGrowthRate(0);
    } finally {
      setLoading(false);
    }
  };

  const handleRefresh = () => {
    fetchReportsData();
  };

  if (loading) {
    return <LoadingState message="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô..." />;
  }

  return (
    <Box sx={{ p: 3 }}>
      {/* Header */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4" component="h1" fontWeight="bold" color="primary">
          üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        </Typography>
        <Stack direction="row" spacing={2}>
          <FormControl size="small" sx={{ minWidth: 150 }}>
            <InputLabel>‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤</InputLabel>
            <Select
              value={dateRange}
              label="‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤"
              onChange={(e) => setDateRange(e.target.value)}
            >
              <MenuItem value="today">‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</MenuItem>
              <MenuItem value="thisWeek">‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ</MenuItem>
              <MenuItem value="thisMonth">‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ</MenuItem>
              <MenuItem value="thisYear">‡∏õ‡∏µ‡∏ô‡∏µ‡πâ</MenuItem>
              <MenuItem value="custom">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á</MenuItem>
            </Select>
          </FormControl>
          <Button variant="outlined" startIcon={<Refresh />} onClick={handleRefresh}>
            ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
          </Button>
          <Button variant="contained" startIcon={<Download />}>
            ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
          </Button>
        </Stack>
      </Box>

      {/* Summary Cards */}
      <GridItem container spacing={3} sx={{ mb: 3 }}>
        <GridItem item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <MonetizationOn color="primary" sx={{ mr: 1 }} />
                <Typography variant="h6">‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°</Typography>
              </Box>
              <Typography variant="h4" fontWeight="bold" color="primary">
                ‡∏ø{totalRevenue.toLocaleString()}
              </Typography>
              <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
                <TrendingUp color="success" sx={{ fontSize: 16, mr: 0.5 }} />
                <Typography variant="body2" color="success.main">
                  +{growthRate.toFixed(1)}% ‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
                </Typography>
              </Box>
            </CardContent>
          </Card>
        </GridItem>
        <GridItem item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <LocalHospital color="secondary" sx={{ mr: 1 }} />
                <Typography variant="h6">‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏ß‡∏°</Typography>
              </Box>
              <Typography variant="h4" fontWeight="bold" color="secondary">
                {totalTreatments}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÉ‡∏ô 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
              </Typography>
            </CardContent>
          </Card>
        </GridItem>
        <GridItem item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <People color="info" sx={{ mr: 1 }} />
                <Typography variant="h6">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</Typography>
              </Box>
              <Typography variant="h4" fontWeight="bold" color="info">
                {customerSegments.reduce((sum, seg) => sum + seg.count, 0)}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                +{customerSegments[0].count} ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
              </Typography>
            </CardContent>
          </Card>
        </GridItem>
        <GridItem item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <Assessment color="warning" sx={{ mr: 1 }} />
                <Typography variant="h6">‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</Typography>
              </Box>
              <Typography variant="h4" fontWeight="bold" color="warning">
                ‡∏ø{avgRevenue.toLocaleString()}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
              </Typography>
            </CardContent>
          </Card>
        </GridItem>
      </GridItem>

      {/* Tabs */}
      <Card>
        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs value={tabValue} onChange={(_, newValue) => setTabValue(newValue)}>
            <Tab icon={<BarChart />} label="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢" />
            <Tab icon={<People />} label="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤" />
            <Tab icon={<CalendarToday />} label="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" />
            <Tab icon={<Inventory />} label="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡∏Ñ‡∏•‡∏±‡∏á" />
          </Tabs>
        </Box>

        <TabPanel value={tabValue} index={0}>
          {/* Sales Report */}
          <Typography variant="h6" sx={{ mb: 3 }}>üí∞ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ</Typography>
          
          <GridItem container spacing={3}>
            <GridItem item xs={12} md={8}>
              <Card variant="outlined">
                <CardContent>
                  <Typography variant="h6" sx={{ mb: 2 }}>‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</Typography>
                  <Box sx={{ height: 300, bgcolor: 'grey.50', display: 'flex', alignItems: 'center', justifyContent: 'center', borderRadius: 1 }}>
                    <Typography color="text.secondary">üìà ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</Typography>
                  </Box>
                </CardContent>
              </Card>
            </GridItem>
            <GridItem item xs={12} md={4}>
              <Card variant="outlined">
                <CardContent>
                  <Typography variant="h6" sx={{ mb: 2 }}>‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°</Typography>
                  {topTreatments.slice(0, 5).map((treatment, index) => (
                    <Box key={index} sx={{ mb: 2 }}>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                        <Typography variant="body2">{treatment.name}</Typography>
                        <Typography variant="body2" fontWeight="bold">
                          {treatment.count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                        </Typography>
                      </Box>
                      <LinearProgress 
                        variant="determinate" 
                        value={(treatment.count / 145) * 100} 
                        sx={{ mt: 1 }}
                      />
                      <Typography variant="caption" color="text.secondary">
                        ‡∏ø{treatment.revenue.toLocaleString()}
                      </Typography>
                    </Box>
                  ))}
                </CardContent>
              </Card>
            </GridItem>
          </GridItem>

          <Card variant="outlined" sx={{ mt: 3 }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2 }}>üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</Typography>
              <TableContainer>
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell>‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</TableCell>
                      <TableCell align="right">‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ</TableCell>
                      <TableCell align="right">‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤</TableCell>
                      <TableCell align="right">‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à</TableCell>
                      <TableCell align="right">‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {salesData.map((row) => (
                      <TableRow key={row.month}>
                        <TableCell>{row.month}</TableCell>
                        <TableCell align="right">‡∏ø{row.revenue.toLocaleString()}</TableCell>
                        <TableCell align="right">{row.treatments}</TableCell>
                        <TableCell align="right">{row.packages}</TableCell>
                        <TableCell align="right">
                          ‡∏ø{Math.round(row.revenue / row.treatments).toLocaleString()}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            </CardContent>
          </Card>
        </TabPanel>

        <TabPanel value={tabValue} index={1}>
          {/* Customer Report */}
          <Typography variant="h6" sx={{ mb: 3 }}>üë• ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå</Typography>
          
          <GridItem container spacing={3}>
            <GridItem item xs={12} md={6}>
              <Card variant="outlined">
                <CardContent>
                  <Typography variant="h6" sx={{ mb: 2 }}>‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</Typography>
                  {customerSegments.map((segment, index) => (
                    <Box key={index} sx={{ mb: 3 }}>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                        <Typography variant="body2">{segment.segment}</Typography>
                        <Typography variant="body2" fontWeight="bold">
                          {segment.count} ‡∏Ñ‡∏ô ({segment.percentage}%)
                        </Typography>
                      </Box>
                      <LinearProgress 
                        variant="determinate" 
                        value={segment.percentage} 
                        sx={{ mb: 1 }}
                      />
                      <Typography variant="caption" color="text.secondary">
                        ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ: ‡∏ø{segment.revenue.toLocaleString()}
                      </Typography>
                    </Box>
                  ))}
                </CardContent>
              </Card>
            </GridItem>
            <GridItem item xs={12} md={6}>
              <Card variant="outlined">
                <CardContent>
                  <Typography variant="h6" sx={{ mb: 2 }}>‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</Typography>
                  <Stack spacing={2}>
                    <Box>
                      <Typography variant="body2" color="text.secondary">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà</Typography>
                      <Typography variant="h5" fontWeight="bold" color="success.main">
                        +35% <Typography component="span" variant="body2">‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ</Typography>
                      </Typography>
                    </Box>
                    <Box>
                      <Typography variant="body2" color="text.secondary">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤</Typography>
                      <Typography variant="h5" fontWeight="bold" color="primary">
                        78% <Typography component="span" variant="body2">‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</Typography>
                      </Typography>
                    </Box>
                    <Box>
                      <Typography variant="body2" color="text.secondary">‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</Typography>
                      <Typography variant="h5" fontWeight="bold" color="warning.main">
                        ‡∏ø5,125 <Typography component="span" variant="body2">‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á</Typography>
                      </Typography>
                    </Box>
                    <Box>
                      <Typography variant="body2" color="text.secondary">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à</Typography>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Typography variant="h5" fontWeight="bold" color="warning.main" sx={{ mr: 1 }}>
                          4.8
                        </Typography>
                        {[1,2,3,4,5].map((star) => (
                          <Star key={star} color={star <= 5 ? 'warning' : 'disabled'} />
                        ))}
                      </Box>
                    </Box>
                  </Stack>
                </CardContent>
              </Card>
            </GridItem>
          </GridItem>
        </TabPanel>

        <TabPanel value={tabValue} index={2}>
          {/* Appointment Report */}
          <Typography variant="h6" sx={{ mb: 3 }}>üìÖ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ô‡∏±‡∏î</Typography>
          
          <GridItem container spacing={3}>
            <GridItem item xs={12} md={4}>
              <Card variant="outlined">
                <CardContent sx={{ textAlign: 'center' }}>
                  <Event color="primary" sx={{ fontSize: 40, mb: 1 }} />
                  <Typography variant="h4" fontWeight="bold" color="primary">298</Typography>
                  <Typography variant="body2">‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ</Typography>
                </CardContent>
              </Card>
            </GridItem>
            <GridItem item xs={12} md={4}>
              <Card variant="outlined">
                <CardContent sx={{ textAlign: 'center' }}>
                  <PersonAdd color="success" sx={{ fontSize: 40, mb: 1 }} />
                  <Typography variant="h4" fontWeight="bold" color="success.main">92%</Typography>
                  <Typography variant="body2">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏°‡∏≤</Typography>
                </CardContent>
              </Card>
            </GridItem>
            <GridItem item xs={12} md={4}>
              <Card variant="outlined">
                <CardContent sx={{ textAlign: 'center' }}>
                  <DateRange color="warning" sx={{ fontSize: 40, mb: 1 }} />
                  <Typography variant="h4" fontWeight="bold" color="warning.main">24</Typography>
                  <Typography variant="body2">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å/‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô</Typography>
                </CardContent>
              </Card>
            </GridItem>
          </GridItem>

          <Card variant="outlined" sx={{ mt: 3 }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2 }}>üìä ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤</Typography>
              <Box sx={{ height: 250, bgcolor: 'grey.50', display: 'flex', alignItems: 'center', justifyContent: 'center', borderRadius: 1 }}>
                <Typography color="text.secondary">üìä ‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤</Typography>
              </Box>
            </CardContent>
          </Card>

          <Card variant="outlined" sx={{ mt: 3 }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2 }}>üïí ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</Typography>
              <GridItem container spacing={2}>
                {[
                  { time: '09:00-11:00', bookings: 45, percentage: 85 },
                  { time: '11:00-13:00', bookings: 38, percentage: 72 },
                  { time: '13:00-15:00', bookings: 25, percentage: 47 },
                  { time: '15:00-17:00', bookings: 42, percentage: 79 },
                  { time: '17:00-19:00', bookings: 35, percentage: 66 },
                ].map((slot, index) => (
                  <GridItem item xs={12} sm={6} md={4} key={index}>
                    <Box sx={{ p: 2, border: 1, borderColor: 'divider', borderRadius: 1 }}>
                      <Typography variant="body2" fontWeight="bold">{slot.time}</Typography>
                      <Typography variant="body2">{slot.bookings} ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</Typography>
                      <LinearProgress variant="determinate" value={slot.percentage} sx={{ mt: 1 }} />
                    </Box>
                  </GridItem>
                ))}
              </GridItem>
            </CardContent>
          </Card>
        </TabPanel>

        <TabPanel value={tabValue} index={3}>
          {/* Inventory Report */}
          <Typography variant="h6" sx={{ mb: 3 }}>üì¶ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</Typography>
          
          <GridItem container spacing={3}>
            <GridItem item xs={12} md={8}>
              <Card variant="outlined">
                <CardContent>
                  <Typography variant="h6" sx={{ mb: 2 }}>üö® ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°</Typography>
                  <TableContainer>
                    <Table>
                      <TableHead>
                        <TableRow>
                          <TableCell>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</TableCell>
                          <TableCell align="right">‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</TableCell>
                          <TableCell align="right">‡∏à‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</TableCell>
                          <TableCell>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</TableCell>
                          <TableCell>‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {inventoryAlerts.map((item, index) => (
                          <TableRow key={index}>
                            <TableCell>{item.item}</TableCell>
                            <TableCell align="right">{item.stock}</TableCell>
                            <TableCell align="right">{item.reorder}</TableCell>
                            <TableCell>
                              <Chip
                                label={
                                  item.status === 'critical' ? '‡∏ß‡∏¥‡∏Å‡∏§‡∏ï' :
                                  item.status === 'low' ? '‡∏ï‡πà‡∏≥' : '‡∏õ‡∏Å‡∏ï‡∏¥'
                                }
                                color={
                                  item.status === 'critical' ? 'error' :
                                  item.status === 'low' ? 'warning' : 'success'
                                }
                                size="small"
                              />
                            </TableCell>
                            <TableCell>
                              <Button size="small" variant="outlined">
                                ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
                              </Button>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>
                </CardContent>
              </Card>
            </GridItem>
            <GridItem item xs={12} md={4}>
              <Card variant="outlined">
                <CardContent>
                  <Typography variant="h6" sx={{ mb: 2 }}>üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡∏Ñ‡∏•‡∏±‡∏á</Typography>
                  <Stack spacing={2}>
                    <Box>
                      <Typography variant="body2" color="text.secondary">‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°</Typography>
                      <Typography variant="h5" fontWeight="bold" color="primary">
                        ‡∏ø2,450,000
                      </Typography>
                    </Box>
                    <Box>
                      <Typography variant="body2" color="text.secondary">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</Typography>
                      <Typography variant="h5" fontWeight="bold">
                        1,247 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                      </Typography>
                    </Box>
                    <Box>
                      <Typography variant="body2" color="text.secondary">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î</Typography>
                      <Typography variant="h5" fontWeight="bold" color="error">
                        3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                      </Typography>
                    </Box>
                    <Box>
                      <Typography variant="body2" color="text.secondary">‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏</Typography>
                      <Typography variant="h5" fontWeight="bold" color="warning.main">
                        15 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                      </Typography>
                    </Box>
                  </Stack>
                </CardContent>
              </Card>
            </GridItem>
          </GridItem>
        </TabPanel>
      </Card>

      {/* Quick Actions */}
      <Card sx={{ mt: 3 }}>
        <CardContent>
          <Typography variant="h6" sx={{ mb: 2 }}>‚ö° ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡πà‡∏ß‡∏ô</Typography>
          <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>
            <Button variant="outlined" startIcon={<Download />} sx={{ flex: 1 }}>
              ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
            </Button>
            <Button variant="outlined" startIcon={<Print />} sx={{ flex: 1 }}>
              ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
            </Button>
            <Button variant="outlined" startIcon={<Assessment />} sx={{ flex: 1 }}>
              ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°
            </Button>
            <Button variant="outlined" startIcon={<DateRange />} sx={{ flex: 1 }}>
              ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            </Button>
          </Stack>
        </CardContent>
      </Card>
    </Box>
  );
};

export default Reports;
